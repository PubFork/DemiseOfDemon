// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
#ifndef BM3_SDK_INC_BM3_CORE_BM3_CONST_H
#define BM3_SDK_INC_BM3_CORE_BM3_CONST_H

#include "../system/bm3_PlatformNamespace.h"

namespace bm3{
BM3_BEGIN_PLATFORM_NAMESPACE

// ResIdeNode MD5
enum ResIdeNodeMD5{
	ResIdeNodeMD5_0 = 0xC8CBC9BC,
	ResIdeNodeMD5_1 = 0x98B48F14,
	ResIdeNodeMD5_2 = 0x6A739B68,
	ResIdeNodeMD5_3 = 0x48FCF819
};

/// @brief	フィールド位置タイプ
enum FieldPositionTypeConst{
	FieldPositionTypeConst_Constant,	///< 固定
	FieldPositionTypeConst_Curve,	///< カーブ
	//
	FieldPositionTypeConst_MAX,
	//
	FieldPositionTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	ストライプタイプ
enum StripeTypeConst{
	StripeTypeConst_Billboard,	///< ビルボード
	StripeTypeConst_Polygon,	///< ポリゴン
	StripeTypeConst_Facing,	///< フェイシング
	//
	StripeTypeConst_MAX,
	//
	StripeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	アルファタイプ
enum BlendAlphaTypeConst{
	BlendAlphaTypeConst_Constant,	///< 固定
	BlendAlphaTypeConst_Curve,	///< カーブ
	//
	BlendAlphaTypeConst_MAX,
	//
	BlendAlphaTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	ブレンドタイプ
enum BlendTypeConst{
	BlendTypeConst_Non,	///< なし
	BlendTypeConst_Semitrans,	///< 透過
	BlendTypeConst_SemiAdd,	///< 透過加算
	BlendTypeConst_SemiSub,	///< 透過減算
	BlendTypeConst_Add,	///< 加算
	BlendTypeConst_Sub,	///< 減算
	BlendTypeConst_Reverse,	///< 反転
	//
	BlendTypeConst_MAX,
	//
	BlendTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	色タイプ
enum ColorTypeConst{
	ColorTypeConst_Constant,	///< 固定
	ColorTypeConst_Curve,	///< カーブ
	//
	ColorTypeConst_MAX,
	//
	ColorTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	ユーザーデータ要素タイプ
enum UserDataElementTypeConst{
	UserDataElementTypeConst_Int,	///< 整数
	UserDataElementTypeConst_Float,	///< 実数
	UserDataElementTypeConst_String,	///< 文字列
	UserDataElementTypeConst_Vector,	///< ベクトル
	UserDataElementTypeConst_Color,	///< 色
	UserDataElementTypeConst_Bool,	///< 真偽値
	//
	UserDataElementTypeConst_MAX,
	//
	UserDataElementTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド判定タイプ
enum FieldJudgeTypeConst{
	FieldJudgeTypeConst_Touch,	///< 接触時
	FieldJudgeTypeConst_Inside,	///< 内側から接触
	FieldJudgeTypeConst_Outside,	///< 外側から接触
	//
	FieldJudgeTypeConst_MAX,
	//
	FieldJudgeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	リソースタイプタイプ
enum ResourceTypeConst{
	ResourceTypeConst_Texture,	///< テクスチャ
	ResourceTypeConst_Model,	///< モデル
	ResourceTypeConst_Bmsln,	///< Bmsln
	ResourceTypeConst_Undefined,	///< 未定義
	//
	ResourceTypeConst_MAX,
	//
	ResourceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	テクスチャーアドレッシングタイプ
enum TextureAddressTypeConst{
	TextureAddressTypeConst_Clamp,	///< クランプ
	TextureAddressTypeConst_Repeat,	///< リピート
	TextureAddressTypeConst_Mirror,	///< ミラー
	//
	TextureAddressTypeConst_MAX,
	//
	TextureAddressTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	キーフレームタイプ
enum KeyframeTypeConst{
	KeyframeTypeConst_Constant,	///< 固定
	KeyframeTypeConst_Linear,	///< リニア
	KeyframeTypeConst_Spline,	///< スプライン
	KeyframeTypeConst_BreakSpline,	///< 折れるスプライン
	KeyframeTypeConst_Bezier,	///< ベジェ
	//
	KeyframeTypeConst_MAX,
	//
	KeyframeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	親ノード回転影響タイプ
enum RotateParentNodeInfluenceTypeConst{
	RotateParentNodeInfluenceTypeConst_Off,	///< 受けない
	RotateParentNodeInfluenceTypeConst_On,	///< 受ける
	RotateParentNodeInfluenceTypeConst_OnGenerateTime,	///< 生成時のみ受ける
	//
	RotateParentNodeInfluenceTypeConst_MAX,
	//
	RotateParentNodeInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド位置タイプ
enum FieldPosTypeConst{
	FieldPosTypeConst_Constant,	///< 固定
	FieldPosTypeConst_Curve,	///< カーブ
	//
	FieldPosTypeConst_MAX,
	//
	FieldPosTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド方向タイプ
enum FieldDirectionTypeConst{
	FieldDirectionTypeConst_Constant,	///< 固定
	FieldDirectionTypeConst_Curve,	///< カーブ
	//
	FieldDirectionTypeConst_MAX,
	//
	FieldDirectionTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フェイシングタイプ
enum FacingTypeConst{
	FacingTypeConst_Root,	///< ルート
	FacingTypeConst_Camera,	///< カメラ
	FacingTypeConst_User,	///< ユーザー
	//
	FacingTypeConst_MAX,
	//
	FacingTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	親ノードマトリックス影響タイプ
enum MatrixParentNodeInfluenceTypeConst{
	MatrixParentNodeInfluenceTypeConst_Off,	///< 受けない
	MatrixParentNodeInfluenceTypeConst_On,	///< 受ける
	MatrixParentNodeInfluenceTypeConst_OnGenerateTime,	///< 生成時のみ受ける
	//
	MatrixParentNodeInfluenceTypeConst_MAX,
	//
	MatrixParentNodeInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	終了タイプ
enum ExpirationTypeConst{
	ExpirationTypeConst_Life,	///< 寿命
	ExpirationTypeConst_AllChildExpired,	///< すべての子が消滅
	//
	ExpirationTypeConst_MAX,
	//
	ExpirationTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	平面形状タイプ
enum FieldPlaneShapeTypeConst{
	FieldPlaneShapeTypeConst_Infinit,	///< 無限
	FieldPlaneShapeTypeConst_Circle,	///< 円
	FieldPlaneShapeTypeConst_Square,	///< 矩形
	//
	FieldPlaneShapeTypeConst_MAX,
	//
	FieldPlaneShapeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	コリジョンタイプ
enum FieldCollisionShapeTypeConst{
	FieldCollisionShapeTypeConst_Plane,	///< 平面
	FieldCollisionShapeTypeConst_Sphere,	///< 球
	FieldCollisionShapeTypeConst_Cube,	///< 立方体
	//
	FieldCollisionShapeTypeConst_MAX,
	//
	FieldCollisionShapeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド軸タイプ
enum FieldAxisTypeConst{
	FieldAxisTypeConst_Constant,	///< 固定
	FieldAxisTypeConst_Curve,	///< カーブ
	//
	FieldAxisTypeConst_MAX,
	//
	FieldAxisTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	アルファテストタイプ
enum AlphaTestTypeConst{
	AlphaTestTypeConst_Less,	///< Less
	AlphaTestTypeConst_LessEqual,	///< LessEqual
	AlphaTestTypeConst_Greater,	///< Greater
	AlphaTestTypeConst_GreaterEqual,	///< GreaterEqual
	AlphaTestTypeConst_Equal,	///< Equal
	AlphaTestTypeConst_NotEqual,	///< NotEqual
	AlphaTestTypeConst_Never,	///< Never
	AlphaTestTypeConst_Always,	///< Always
	//
	AlphaTestTypeConst_MAX,
	//
	AlphaTestTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	回転タイプ
enum RotateTypeConst{
	RotateTypeConst_Constant,	///< 固定
	RotateTypeConst_NewtonDynamics,	///< ニュートンダイナミクス
	RotateTypeConst_CurveValue,	///< カーブ - 値
	RotateTypeConst_CurveSpeed,	///< カーブ - 速度
	//
	RotateTypeConst_MAX,
	//
	RotateTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	親ノード移動影響タイプ
enum TranslateParentNodeInfluenceTypeConst{
	TranslateParentNodeInfluenceTypeConst_On,	///< 受ける
	TranslateParentNodeInfluenceTypeConst_OnGenerateTime,	///< 生成時のみ受ける
	//
	TranslateParentNodeInfluenceTypeConst_MAX,
	//
	TranslateParentNodeInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	オブジェクトタイプ
enum ObjectTypeConst{
	ObjectTypeConst_Reference,	///< 参照
	//
	ObjectTypeConst_MAX,
	//
	ObjectTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	拡縮タイプ
enum ScaleTypeConst{
	ScaleTypeConst_Constant,	///< 固定
	ScaleTypeConst_NewtonDynamics,	///< ニュートンダイナミクス
	ScaleTypeConst_CurveValue,	///< カーブ - 値
	ScaleTypeConst_CurveSpeed,	///< カーブ - 速度
	//
	ScaleTypeConst_MAX,
	//
	ScaleTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド範囲タイプ
enum FieldAreaTypeConst{
	FieldAreaTypeConst_Infinit,	///< 無限
	FieldAreaTypeConst_Constant,	///< 固定
	FieldAreaTypeConst_Curve,	///< カーブ
	//
	FieldAreaTypeConst_MAX,
	//
	FieldAreaTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド強さタイプ
enum FieldMagnitudeTypeConst{
	FieldMagnitudeTypeConst_Constant,	///< 固定
	FieldMagnitudeTypeConst_Curve,	///< カーブ
	//
	FieldMagnitudeTypeConst_MAX,
	//
	FieldMagnitudeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	クアッドタイプ
enum QuadTypeConst{
	QuadTypeConst_Billboard,	///< ビルボード
	QuadTypeConst_Polygon,	///< ポリゴン
	QuadTypeConst_Facing,	///< フェイシング
	QuadTypeConst_Polyline,	///< ポリライン
	QuadTypeConst_Directional,	///< ディレクショナル
	QuadTypeConst_DirectionalPolyline,	///< ディレクショナルポリライン
	//
	QuadTypeConst_MAX,
	//
	QuadTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	法線タイプ
enum NormalTypeConst{
	NormalTypeConst_Standard,	///< スタンダードな法線
	NormalTypeConst_CameraDirectory,	///< カメラに向ける
	//
	NormalTypeConst_MAX,
	//
	NormalTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	座標系変換タイプ
enum CoordinateSystemConvertTypeConst{
	CoordinateSystemConvertTypeConst_Scale,	///< スケール
	CoordinateSystemConvertTypeConst_Rotate,	///< 回転
	CoordinateSystemConvertTypeConst_Translate,	///< 移動
	CoordinateSystemConvertTypeConst_Vertex,	///< 頂点
	CoordinateSystemConvertTypeConst_Inverse,	///< 反転
	CoordinateSystemConvertTypeConst_InverseAngle,	///< 角度反転
	CoordinateSystemConvertTypeConst_InverseAngleHalf,	///< 角度半反転
	//
	CoordinateSystemConvertTypeConst_MAX,
	//
	CoordinateSystemConvertTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールドコリジョン傾きタイプ
enum FieldCollisionSlopeTypeConst{
	FieldCollisionSlopeTypeConst_Constant,	///< 固定
	FieldCollisionSlopeTypeConst_Curve,	///< カーブ
	//
	FieldCollisionSlopeTypeConst_MAX,
	//
	FieldCollisionSlopeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	テクスチャーフィルタタイプ
enum TextureFilterTypeConst{
	TextureFilterTypeConst_Nearest,	///< Nearest
	TextureFilterTypeConst_Linear,	///< Linear
	//
	TextureFilterTypeConst_MAX,
	//
	TextureFilterTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	描画フェイズタイプ
enum DrawPhaseTypeConst{
	DrawPhaseTypeConst_Opacity,	///< 不透明
	DrawPhaseTypeConst_Translucence,	///< 半透明
	//
	DrawPhaseTypeConst_MAX,
	//
	DrawPhaseTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	生成形状タイプ
enum GenerateShapeTypeConst{
	GenerateShapeTypeConst_Point,	///< 点
	GenerateShapeTypeConst_Cube,	///< 立方体
	GenerateShapeTypeConst_Sphere,	///< 球
	GenerateShapeTypeConst_Cylinder,	///< 円柱
	GenerateShapeTypeConst_Model,	///< モデル
	//
	GenerateShapeTypeConst_MAX,
	//
	GenerateShapeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	テクスチャ描画タイプ
enum TextureDrawTypeConst{
	TextureDrawTypeConst_Basic,	///< 基本
	TextureDrawTypeConst_Alpha,	///< アルファ
	TextureDrawTypeConst_Add,	///< 加算
	TextureDrawTypeConst_Sub,	///< 減算
	TextureDrawTypeConst_Reverse,	///< 反転
	TextureDrawTypeConst_Normalmapping,	///< 法線マッピング
	//
	TextureDrawTypeConst_MAX,
	//
	TextureDrawTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	ゴール形状タイプ
enum FieldGoalShapeTypeConst{
	FieldGoalShapeTypeConst_Point,	///< 点
	FieldGoalShapeTypeConst_Cube,	///< 立方体
	FieldGoalShapeTypeConst_Sphere,	///< 球
	FieldGoalShapeTypeConst_Cylinder,	///< 円柱
	FieldGoalShapeTypeConst_Model,	///< モデル
	//
	FieldGoalShapeTypeConst_MAX,
	//
	FieldGoalShapeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	テクスチャーアニメーションタイプ
enum TextureAnimationTypeConst{
	TextureAnimationTypeConst_Nothing,	///< なし
	TextureAnimationTypeConst_Crop,	///< クロップ
	TextureAnimationTypeConst_Scroll,	///< スクロール
	TextureAnimationTypeConst_Pattern,	///< パターン
	TextureAnimationTypeConst_Transform,	///< 変換
	//
	TextureAnimationTypeConst_MAX,
	//
	TextureAnimationTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	テクスチャー画像タイプ
enum TexturePictureTypeConst{
	TexturePictureTypeConst_File,	///< ファイル
	TexturePictureTypeConst_Generate,	///< 生成
	TexturePictureTypeConst_FrameBuffer,	///< フレームバッファ
	//
	TexturePictureTypeConst_MAX,
	//
	TexturePictureTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	乱数タイプ
enum RandomSeedTypeConst{
	RandomSeedTypeConst_RootNode,	///< ランダム
	RandomSeedTypeConst_RootNodeSeedAssign,	///< 種指定
	//
	RandomSeedTypeConst_MAX,
	//
	RandomSeedTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	モデルタイプ
enum ModelTypeConst{
	ModelTypeConst_Billboard,	///< ビルボード
	ModelTypeConst_Standard,	///< 標準
	ModelTypeConst_Facing,	///< フェイシング
	ModelTypeConst_Directional,	///< ディレクショナル
	ModelTypeConst_DirectionalPolyline,	///< ディレクショナルポリライン
	//
	ModelTypeConst_MAX,
	//
	ModelTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	親ノード拡縮影響タイプ
enum ScaleParentNodeInfluenceTypeConst{
	ScaleParentNodeInfluenceTypeConst_Off,	///< 受けない
	ScaleParentNodeInfluenceTypeConst_On,	///< 受ける
	ScaleParentNodeInfluenceTypeConst_OnGenerateTime,	///< 生成時のみ受ける
	//
	ScaleParentNodeInfluenceTypeConst_MAX,
	//
	ScaleParentNodeInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	画像タイプ
enum Image2dTypeConst{
	Image2dTypeConst_BackGround,	///< 背景
	//
	Image2dTypeConst_MAX,
	//
	Image2dTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールドコリジョンサイズタイプ
enum FieldCollisionSizeTypeConst{
	FieldCollisionSizeTypeConst_Constant,	///< 固定
	FieldCollisionSizeTypeConst_Curve,	///< カーブ
	//
	FieldCollisionSizeTypeConst_MAX,
	//
	FieldCollisionSizeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	クロップアニメーションタイプ
enum TextureCropAnimationTypeConst{
	TextureCropAnimationTypeConst__1x1,	///< 1 x 1
	TextureCropAnimationTypeConst__2x1,	///< 2 x 1
	TextureCropAnimationTypeConst__4x1,	///< 4 x 1
	TextureCropAnimationTypeConst__2x2,	///< 2 x 2
	TextureCropAnimationTypeConst__4x4,	///< 4 x 4
	TextureCropAnimationTypeConst__8x8,	///< 8 x 8
	//
	TextureCropAnimationTypeConst_MAX,
	//
	TextureCropAnimationTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	深度テストタイプ
enum DepthTestTypeConst{
	DepthTestTypeConst_Less,	///< Less
	DepthTestTypeConst_LessEqual,	///< LessEqual
	DepthTestTypeConst_Greater,	///< Greater
	DepthTestTypeConst_GreaterEqual,	///< GreaterEqual
	DepthTestTypeConst_Equal,	///< Equal
	DepthTestTypeConst_NotEqual,	///< NotEqual
	DepthTestTypeConst_Never,	///< Never
	DepthTestTypeConst_Always,	///< Always
	//
	DepthTestTypeConst_MAX,
	//
	DepthTestTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	移動タイプ
enum TranslateTypeConst{
	TranslateTypeConst_Constant,	///< 固定
	TranslateTypeConst_NewtonDynamics,	///< ニュートンダイナミクス
	TranslateTypeConst_CurveValue,	///< カーブ - 値
	TranslateTypeConst_CurveSpeed,	///< カーブ - 速度
	//
	TranslateTypeConst_MAX,
	//
	TranslateTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	生成タイプ
enum GenerateTypeConst{
	GenerateTypeConst_Constant,	///< 固定
	GenerateTypeConst_Timing,	///< タイミング
	//
	GenerateTypeConst_MAX,
	//
	GenerateTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	エミッタタイプ
enum EmitterTypeConst{
	EmitterTypeConst_Quad,	///< クアッド
	EmitterTypeConst_Particle,	///< パーティクル
	EmitterTypeConst_SimpleParticle,	///< シンプルパーティクル
	EmitterTypeConst_MassParticle,	///< マスパーティクル
	EmitterTypeConst_Model,	///< モデル
	EmitterTypeConst_Stripe,	///< ストライプ
	//
	EmitterTypeConst_MAX,
	//
	EmitterTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	親ノードアルファ影響タイプ
enum AlphaParentNodeInfluenceTypeConst{
	AlphaParentNodeInfluenceTypeConst_Off,	///< 受けない
	AlphaParentNodeInfluenceTypeConst_On,	///< 受ける
	//
	AlphaParentNodeInfluenceTypeConst_MAX,
	//
	AlphaParentNodeInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	カメラタイプ
enum CameraTypeConst{
	CameraTypeConst_Lookat,	///< 注視点制御
	CameraTypeConst_Handy,	///< ハンディ
	CameraTypeConst_Driving,	///< ドライビング
	CameraTypeConst_FileReference,	///< ファイル参照
	//
	CameraTypeConst_MAX,
	//
	CameraTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールドタイプ
enum FieldTypeConst{
	FieldTypeConst_Gravity,	///< 重力
	FieldTypeConst_Wind,	///< 風
	FieldTypeConst_Vortex,	///< 渦
	FieldTypeConst_Radialpower,	///< 引力ー斥力
	FieldTypeConst_Deceleration,	///< 減速
	FieldTypeConst_Collision,	///< コリジョン
	FieldTypeConst_Goal,	///< ゴール
	//
	FieldTypeConst_MAX,
	//
	FieldTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	平面タイプ
enum FieldPlaneTypeConst{
	FieldPlaneTypeConst_PlaneXY,	///< XY平面
	FieldPlaneTypeConst_PlaneYZ,	///< YZ平面
	FieldPlaneTypeConst_PlaneZX,	///< ZX平面
	//
	FieldPlaneTypeConst_MAX,
	//
	FieldPlaneTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド影響タイプ
enum FieldInfluenceTypeConst{
	FieldInfluenceTypeConst_Position,	///< 位置に加算
	FieldInfluenceTypeConst_Speed,	///< 速度に加算
	//
	FieldInfluenceTypeConst_MAX,
	//
	FieldInfluenceTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	変形タイプ
enum TransformTypeConst{
	TransformTypeConst_Constant,	///< 固定
	TransformTypeConst_Curve,	///< カーブ
	TransformTypeConst_Vertex,	///< 頂点
	//
	TransformTypeConst_MAX,
	//
	TransformTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	ノ−ドタイプ
enum NodeTypeConst{
	NodeTypeConst_ControlNull,	///< コントール - ヌル
	NodeTypeConst_ControlXXX,	///< コントロール
	NodeTypeConst_EmitterQuad,	///< エミッタ - クアッド
	NodeTypeConst_EmitterParticle,	///< エミッタ - パーティクル
	NodeTypeConst_EmitterSimpleParticle,	///< エミッタ - シンプルパーティクル
	NodeTypeConst_EmitterMassParticle,	///< エミッタ - マスパーティクル
	NodeTypeConst_EmitterModel,	///< エミッタ - モデル
	NodeTypeConst_EmitterStripe,	///< エミッタ - ストライプ
	NodeTypeConst_EmitterXXX,	///< エミッタ
	NodeTypeConst_FieldGravity,	///< フィールド - 重力
	NodeTypeConst_FieldWind,	///< フィールド - 風
	NodeTypeConst_FieldVortex,	///< フィールド - 渦
	NodeTypeConst_FieldRadialpower,	///< フィールド - 引力-斥力
	NodeTypeConst_FieldDeceleration,	///< フィールド - 減速
	NodeTypeConst_FieldCollision,	///< フィールド - コリジョン
	NodeTypeConst_FieldGoal,	///< フィールド - ゴール
	NodeTypeConst_FieldXXX,	///< フィールド
	NodeTypeConst_ObjectReference,	///< オブジェクト - 参照
	NodeTypeConst_ObjectXXX,	///< オブジェクト
	NodeTypeConst_CameraLookat,	///< カメラ - 注視点制御
	NodeTypeConst_CameraHandy,	///< カメラ - ハンディ
	NodeTypeConst_CameraDriving,	///< カメラ - ドライビング
	NodeTypeConst_CameraFileReference,	///< カメラ - ファイル参照
	NodeTypeConst_CameraXXX,	///< カメラ
	NodeTypeConst_Image2dBackGround,	///< 画像 - 背景
	NodeTypeConst_Image2dXXX,	///< 画像
	//
	NodeTypeConst_MAX,
	//
	NodeTypeConst_FORCE32 = 0xFFFFFFFF
};

/// @brief	フィールド位置タイプ
inline static const char *ToString(FieldPositionTypeConst e){
	switch(e){
		case FieldPositionTypeConst_Constant:	return "FieldPositionTypeConst_Constant";
		case FieldPositionTypeConst_Curve:	return "FieldPositionTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldPositionTypeConst e){
	switch(e){
		case FieldPositionTypeConst_Constant:	return L"FieldPositionTypeConst_Constant";
		case FieldPositionTypeConst_Curve:	return L"FieldPositionTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	ストライプタイプ
inline static const char *ToString(StripeTypeConst e){
	switch(e){
		case StripeTypeConst_Billboard:	return "StripeTypeConst_Billboard";
		case StripeTypeConst_Polygon:	return "StripeTypeConst_Polygon";
		case StripeTypeConst_Facing:	return "StripeTypeConst_Facing";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(StripeTypeConst e){
	switch(e){
		case StripeTypeConst_Billboard:	return L"StripeTypeConst_Billboard";
		case StripeTypeConst_Polygon:	return L"StripeTypeConst_Polygon";
		case StripeTypeConst_Facing:	return L"StripeTypeConst_Facing";
		default:	return L"UNKNOWN";
	}
}

/// @brief	アルファタイプ
inline static const char *ToString(BlendAlphaTypeConst e){
	switch(e){
		case BlendAlphaTypeConst_Constant:	return "BlendAlphaTypeConst_Constant";
		case BlendAlphaTypeConst_Curve:	return "BlendAlphaTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(BlendAlphaTypeConst e){
	switch(e){
		case BlendAlphaTypeConst_Constant:	return L"BlendAlphaTypeConst_Constant";
		case BlendAlphaTypeConst_Curve:	return L"BlendAlphaTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	ブレンドタイプ
inline static const char *ToString(BlendTypeConst e){
	switch(e){
		case BlendTypeConst_Non:	return "BlendTypeConst_Non";
		case BlendTypeConst_Semitrans:	return "BlendTypeConst_Semitrans";
		case BlendTypeConst_SemiAdd:	return "BlendTypeConst_SemiAdd";
		case BlendTypeConst_SemiSub:	return "BlendTypeConst_SemiSub";
		case BlendTypeConst_Add:	return "BlendTypeConst_Add";
		case BlendTypeConst_Sub:	return "BlendTypeConst_Sub";
		case BlendTypeConst_Reverse:	return "BlendTypeConst_Reverse";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(BlendTypeConst e){
	switch(e){
		case BlendTypeConst_Non:	return L"BlendTypeConst_Non";
		case BlendTypeConst_Semitrans:	return L"BlendTypeConst_Semitrans";
		case BlendTypeConst_SemiAdd:	return L"BlendTypeConst_SemiAdd";
		case BlendTypeConst_SemiSub:	return L"BlendTypeConst_SemiSub";
		case BlendTypeConst_Add:	return L"BlendTypeConst_Add";
		case BlendTypeConst_Sub:	return L"BlendTypeConst_Sub";
		case BlendTypeConst_Reverse:	return L"BlendTypeConst_Reverse";
		default:	return L"UNKNOWN";
	}
}

/// @brief	色タイプ
inline static const char *ToString(ColorTypeConst e){
	switch(e){
		case ColorTypeConst_Constant:	return "ColorTypeConst_Constant";
		case ColorTypeConst_Curve:	return "ColorTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ColorTypeConst e){
	switch(e){
		case ColorTypeConst_Constant:	return L"ColorTypeConst_Constant";
		case ColorTypeConst_Curve:	return L"ColorTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	ユーザーデータ要素タイプ
inline static const char *ToString(UserDataElementTypeConst e){
	switch(e){
		case UserDataElementTypeConst_Int:	return "UserDataElementTypeConst_Int";
		case UserDataElementTypeConst_Float:	return "UserDataElementTypeConst_Float";
		case UserDataElementTypeConst_String:	return "UserDataElementTypeConst_String";
		case UserDataElementTypeConst_Vector:	return "UserDataElementTypeConst_Vector";
		case UserDataElementTypeConst_Color:	return "UserDataElementTypeConst_Color";
		case UserDataElementTypeConst_Bool:	return "UserDataElementTypeConst_Bool";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(UserDataElementTypeConst e){
	switch(e){
		case UserDataElementTypeConst_Int:	return L"UserDataElementTypeConst_Int";
		case UserDataElementTypeConst_Float:	return L"UserDataElementTypeConst_Float";
		case UserDataElementTypeConst_String:	return L"UserDataElementTypeConst_String";
		case UserDataElementTypeConst_Vector:	return L"UserDataElementTypeConst_Vector";
		case UserDataElementTypeConst_Color:	return L"UserDataElementTypeConst_Color";
		case UserDataElementTypeConst_Bool:	return L"UserDataElementTypeConst_Bool";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド判定タイプ
inline static const char *ToString(FieldJudgeTypeConst e){
	switch(e){
		case FieldJudgeTypeConst_Touch:	return "FieldJudgeTypeConst_Touch";
		case FieldJudgeTypeConst_Inside:	return "FieldJudgeTypeConst_Inside";
		case FieldJudgeTypeConst_Outside:	return "FieldJudgeTypeConst_Outside";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldJudgeTypeConst e){
	switch(e){
		case FieldJudgeTypeConst_Touch:	return L"FieldJudgeTypeConst_Touch";
		case FieldJudgeTypeConst_Inside:	return L"FieldJudgeTypeConst_Inside";
		case FieldJudgeTypeConst_Outside:	return L"FieldJudgeTypeConst_Outside";
		default:	return L"UNKNOWN";
	}
}

/// @brief	リソースタイプタイプ
inline static const char *ToString(ResourceTypeConst e){
	switch(e){
		case ResourceTypeConst_Texture:	return "ResourceTypeConst_Texture";
		case ResourceTypeConst_Model:	return "ResourceTypeConst_Model";
		case ResourceTypeConst_Bmsln:	return "ResourceTypeConst_Bmsln";
		case ResourceTypeConst_Undefined:	return "ResourceTypeConst_Undefined";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ResourceTypeConst e){
	switch(e){
		case ResourceTypeConst_Texture:	return L"ResourceTypeConst_Texture";
		case ResourceTypeConst_Model:	return L"ResourceTypeConst_Model";
		case ResourceTypeConst_Bmsln:	return L"ResourceTypeConst_Bmsln";
		case ResourceTypeConst_Undefined:	return L"ResourceTypeConst_Undefined";
		default:	return L"UNKNOWN";
	}
}

/// @brief	テクスチャーアドレッシングタイプ
inline static const char *ToString(TextureAddressTypeConst e){
	switch(e){
		case TextureAddressTypeConst_Clamp:	return "TextureAddressTypeConst_Clamp";
		case TextureAddressTypeConst_Repeat:	return "TextureAddressTypeConst_Repeat";
		case TextureAddressTypeConst_Mirror:	return "TextureAddressTypeConst_Mirror";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TextureAddressTypeConst e){
	switch(e){
		case TextureAddressTypeConst_Clamp:	return L"TextureAddressTypeConst_Clamp";
		case TextureAddressTypeConst_Repeat:	return L"TextureAddressTypeConst_Repeat";
		case TextureAddressTypeConst_Mirror:	return L"TextureAddressTypeConst_Mirror";
		default:	return L"UNKNOWN";
	}
}

/// @brief	キーフレームタイプ
inline static const char *ToString(KeyframeTypeConst e){
	switch(e){
		case KeyframeTypeConst_Constant:	return "KeyframeTypeConst_Constant";
		case KeyframeTypeConst_Linear:	return "KeyframeTypeConst_Linear";
		case KeyframeTypeConst_Spline:	return "KeyframeTypeConst_Spline";
		case KeyframeTypeConst_BreakSpline:	return "KeyframeTypeConst_BreakSpline";
		case KeyframeTypeConst_Bezier:	return "KeyframeTypeConst_Bezier";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(KeyframeTypeConst e){
	switch(e){
		case KeyframeTypeConst_Constant:	return L"KeyframeTypeConst_Constant";
		case KeyframeTypeConst_Linear:	return L"KeyframeTypeConst_Linear";
		case KeyframeTypeConst_Spline:	return L"KeyframeTypeConst_Spline";
		case KeyframeTypeConst_BreakSpline:	return L"KeyframeTypeConst_BreakSpline";
		case KeyframeTypeConst_Bezier:	return L"KeyframeTypeConst_Bezier";
		default:	return L"UNKNOWN";
	}
}

/// @brief	親ノード回転影響タイプ
inline static const char *ToString(RotateParentNodeInfluenceTypeConst e){
	switch(e){
		case RotateParentNodeInfluenceTypeConst_Off:	return "RotateParentNodeInfluenceTypeConst_Off";
		case RotateParentNodeInfluenceTypeConst_On:	return "RotateParentNodeInfluenceTypeConst_On";
		case RotateParentNodeInfluenceTypeConst_OnGenerateTime:	return "RotateParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(RotateParentNodeInfluenceTypeConst e){
	switch(e){
		case RotateParentNodeInfluenceTypeConst_Off:	return L"RotateParentNodeInfluenceTypeConst_Off";
		case RotateParentNodeInfluenceTypeConst_On:	return L"RotateParentNodeInfluenceTypeConst_On";
		case RotateParentNodeInfluenceTypeConst_OnGenerateTime:	return L"RotateParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド位置タイプ
inline static const char *ToString(FieldPosTypeConst e){
	switch(e){
		case FieldPosTypeConst_Constant:	return "FieldPosTypeConst_Constant";
		case FieldPosTypeConst_Curve:	return "FieldPosTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldPosTypeConst e){
	switch(e){
		case FieldPosTypeConst_Constant:	return L"FieldPosTypeConst_Constant";
		case FieldPosTypeConst_Curve:	return L"FieldPosTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド方向タイプ
inline static const char *ToString(FieldDirectionTypeConst e){
	switch(e){
		case FieldDirectionTypeConst_Constant:	return "FieldDirectionTypeConst_Constant";
		case FieldDirectionTypeConst_Curve:	return "FieldDirectionTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldDirectionTypeConst e){
	switch(e){
		case FieldDirectionTypeConst_Constant:	return L"FieldDirectionTypeConst_Constant";
		case FieldDirectionTypeConst_Curve:	return L"FieldDirectionTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フェイシングタイプ
inline static const char *ToString(FacingTypeConst e){
	switch(e){
		case FacingTypeConst_Root:	return "FacingTypeConst_Root";
		case FacingTypeConst_Camera:	return "FacingTypeConst_Camera";
		case FacingTypeConst_User:	return "FacingTypeConst_User";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FacingTypeConst e){
	switch(e){
		case FacingTypeConst_Root:	return L"FacingTypeConst_Root";
		case FacingTypeConst_Camera:	return L"FacingTypeConst_Camera";
		case FacingTypeConst_User:	return L"FacingTypeConst_User";
		default:	return L"UNKNOWN";
	}
}

/// @brief	親ノードマトリックス影響タイプ
inline static const char *ToString(MatrixParentNodeInfluenceTypeConst e){
	switch(e){
		case MatrixParentNodeInfluenceTypeConst_Off:	return "MatrixParentNodeInfluenceTypeConst_Off";
		case MatrixParentNodeInfluenceTypeConst_On:	return "MatrixParentNodeInfluenceTypeConst_On";
		case MatrixParentNodeInfluenceTypeConst_OnGenerateTime:	return "MatrixParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(MatrixParentNodeInfluenceTypeConst e){
	switch(e){
		case MatrixParentNodeInfluenceTypeConst_Off:	return L"MatrixParentNodeInfluenceTypeConst_Off";
		case MatrixParentNodeInfluenceTypeConst_On:	return L"MatrixParentNodeInfluenceTypeConst_On";
		case MatrixParentNodeInfluenceTypeConst_OnGenerateTime:	return L"MatrixParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return L"UNKNOWN";
	}
}

/// @brief	終了タイプ
inline static const char *ToString(ExpirationTypeConst e){
	switch(e){
		case ExpirationTypeConst_Life:	return "ExpirationTypeConst_Life";
		case ExpirationTypeConst_AllChildExpired:	return "ExpirationTypeConst_AllChildExpired";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ExpirationTypeConst e){
	switch(e){
		case ExpirationTypeConst_Life:	return L"ExpirationTypeConst_Life";
		case ExpirationTypeConst_AllChildExpired:	return L"ExpirationTypeConst_AllChildExpired";
		default:	return L"UNKNOWN";
	}
}

/// @brief	平面形状タイプ
inline static const char *ToString(FieldPlaneShapeTypeConst e){
	switch(e){
		case FieldPlaneShapeTypeConst_Infinit:	return "FieldPlaneShapeTypeConst_Infinit";
		case FieldPlaneShapeTypeConst_Circle:	return "FieldPlaneShapeTypeConst_Circle";
		case FieldPlaneShapeTypeConst_Square:	return "FieldPlaneShapeTypeConst_Square";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldPlaneShapeTypeConst e){
	switch(e){
		case FieldPlaneShapeTypeConst_Infinit:	return L"FieldPlaneShapeTypeConst_Infinit";
		case FieldPlaneShapeTypeConst_Circle:	return L"FieldPlaneShapeTypeConst_Circle";
		case FieldPlaneShapeTypeConst_Square:	return L"FieldPlaneShapeTypeConst_Square";
		default:	return L"UNKNOWN";
	}
}

/// @brief	コリジョンタイプ
inline static const char *ToString(FieldCollisionShapeTypeConst e){
	switch(e){
		case FieldCollisionShapeTypeConst_Plane:	return "FieldCollisionShapeTypeConst_Plane";
		case FieldCollisionShapeTypeConst_Sphere:	return "FieldCollisionShapeTypeConst_Sphere";
		case FieldCollisionShapeTypeConst_Cube:	return "FieldCollisionShapeTypeConst_Cube";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldCollisionShapeTypeConst e){
	switch(e){
		case FieldCollisionShapeTypeConst_Plane:	return L"FieldCollisionShapeTypeConst_Plane";
		case FieldCollisionShapeTypeConst_Sphere:	return L"FieldCollisionShapeTypeConst_Sphere";
		case FieldCollisionShapeTypeConst_Cube:	return L"FieldCollisionShapeTypeConst_Cube";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド軸タイプ
inline static const char *ToString(FieldAxisTypeConst e){
	switch(e){
		case FieldAxisTypeConst_Constant:	return "FieldAxisTypeConst_Constant";
		case FieldAxisTypeConst_Curve:	return "FieldAxisTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldAxisTypeConst e){
	switch(e){
		case FieldAxisTypeConst_Constant:	return L"FieldAxisTypeConst_Constant";
		case FieldAxisTypeConst_Curve:	return L"FieldAxisTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	アルファテストタイプ
inline static const char *ToString(AlphaTestTypeConst e){
	switch(e){
		case AlphaTestTypeConst_Less:	return "AlphaTestTypeConst_Less";
		case AlphaTestTypeConst_LessEqual:	return "AlphaTestTypeConst_LessEqual";
		case AlphaTestTypeConst_Greater:	return "AlphaTestTypeConst_Greater";
		case AlphaTestTypeConst_GreaterEqual:	return "AlphaTestTypeConst_GreaterEqual";
		case AlphaTestTypeConst_Equal:	return "AlphaTestTypeConst_Equal";
		case AlphaTestTypeConst_NotEqual:	return "AlphaTestTypeConst_NotEqual";
		case AlphaTestTypeConst_Never:	return "AlphaTestTypeConst_Never";
		case AlphaTestTypeConst_Always:	return "AlphaTestTypeConst_Always";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(AlphaTestTypeConst e){
	switch(e){
		case AlphaTestTypeConst_Less:	return L"AlphaTestTypeConst_Less";
		case AlphaTestTypeConst_LessEqual:	return L"AlphaTestTypeConst_LessEqual";
		case AlphaTestTypeConst_Greater:	return L"AlphaTestTypeConst_Greater";
		case AlphaTestTypeConst_GreaterEqual:	return L"AlphaTestTypeConst_GreaterEqual";
		case AlphaTestTypeConst_Equal:	return L"AlphaTestTypeConst_Equal";
		case AlphaTestTypeConst_NotEqual:	return L"AlphaTestTypeConst_NotEqual";
		case AlphaTestTypeConst_Never:	return L"AlphaTestTypeConst_Never";
		case AlphaTestTypeConst_Always:	return L"AlphaTestTypeConst_Always";
		default:	return L"UNKNOWN";
	}
}

/// @brief	回転タイプ
inline static const char *ToString(RotateTypeConst e){
	switch(e){
		case RotateTypeConst_Constant:	return "RotateTypeConst_Constant";
		case RotateTypeConst_NewtonDynamics:	return "RotateTypeConst_NewtonDynamics";
		case RotateTypeConst_CurveValue:	return "RotateTypeConst_CurveValue";
		case RotateTypeConst_CurveSpeed:	return "RotateTypeConst_CurveSpeed";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(RotateTypeConst e){
	switch(e){
		case RotateTypeConst_Constant:	return L"RotateTypeConst_Constant";
		case RotateTypeConst_NewtonDynamics:	return L"RotateTypeConst_NewtonDynamics";
		case RotateTypeConst_CurveValue:	return L"RotateTypeConst_CurveValue";
		case RotateTypeConst_CurveSpeed:	return L"RotateTypeConst_CurveSpeed";
		default:	return L"UNKNOWN";
	}
}

/// @brief	親ノード移動影響タイプ
inline static const char *ToString(TranslateParentNodeInfluenceTypeConst e){
	switch(e){
		case TranslateParentNodeInfluenceTypeConst_On:	return "TranslateParentNodeInfluenceTypeConst_On";
		case TranslateParentNodeInfluenceTypeConst_OnGenerateTime:	return "TranslateParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TranslateParentNodeInfluenceTypeConst e){
	switch(e){
		case TranslateParentNodeInfluenceTypeConst_On:	return L"TranslateParentNodeInfluenceTypeConst_On";
		case TranslateParentNodeInfluenceTypeConst_OnGenerateTime:	return L"TranslateParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return L"UNKNOWN";
	}
}

/// @brief	オブジェクトタイプ
inline static const char *ToString(ObjectTypeConst e){
	switch(e){
		case ObjectTypeConst_Reference:	return "ObjectTypeConst_Reference";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ObjectTypeConst e){
	switch(e){
		case ObjectTypeConst_Reference:	return L"ObjectTypeConst_Reference";
		default:	return L"UNKNOWN";
	}
}

/// @brief	拡縮タイプ
inline static const char *ToString(ScaleTypeConst e){
	switch(e){
		case ScaleTypeConst_Constant:	return "ScaleTypeConst_Constant";
		case ScaleTypeConst_NewtonDynamics:	return "ScaleTypeConst_NewtonDynamics";
		case ScaleTypeConst_CurveValue:	return "ScaleTypeConst_CurveValue";
		case ScaleTypeConst_CurveSpeed:	return "ScaleTypeConst_CurveSpeed";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ScaleTypeConst e){
	switch(e){
		case ScaleTypeConst_Constant:	return L"ScaleTypeConst_Constant";
		case ScaleTypeConst_NewtonDynamics:	return L"ScaleTypeConst_NewtonDynamics";
		case ScaleTypeConst_CurveValue:	return L"ScaleTypeConst_CurveValue";
		case ScaleTypeConst_CurveSpeed:	return L"ScaleTypeConst_CurveSpeed";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド範囲タイプ
inline static const char *ToString(FieldAreaTypeConst e){
	switch(e){
		case FieldAreaTypeConst_Infinit:	return "FieldAreaTypeConst_Infinit";
		case FieldAreaTypeConst_Constant:	return "FieldAreaTypeConst_Constant";
		case FieldAreaTypeConst_Curve:	return "FieldAreaTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldAreaTypeConst e){
	switch(e){
		case FieldAreaTypeConst_Infinit:	return L"FieldAreaTypeConst_Infinit";
		case FieldAreaTypeConst_Constant:	return L"FieldAreaTypeConst_Constant";
		case FieldAreaTypeConst_Curve:	return L"FieldAreaTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド強さタイプ
inline static const char *ToString(FieldMagnitudeTypeConst e){
	switch(e){
		case FieldMagnitudeTypeConst_Constant:	return "FieldMagnitudeTypeConst_Constant";
		case FieldMagnitudeTypeConst_Curve:	return "FieldMagnitudeTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldMagnitudeTypeConst e){
	switch(e){
		case FieldMagnitudeTypeConst_Constant:	return L"FieldMagnitudeTypeConst_Constant";
		case FieldMagnitudeTypeConst_Curve:	return L"FieldMagnitudeTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	クアッドタイプ
inline static const char *ToString(QuadTypeConst e){
	switch(e){
		case QuadTypeConst_Billboard:	return "QuadTypeConst_Billboard";
		case QuadTypeConst_Polygon:	return "QuadTypeConst_Polygon";
		case QuadTypeConst_Facing:	return "QuadTypeConst_Facing";
		case QuadTypeConst_Polyline:	return "QuadTypeConst_Polyline";
		case QuadTypeConst_Directional:	return "QuadTypeConst_Directional";
		case QuadTypeConst_DirectionalPolyline:	return "QuadTypeConst_DirectionalPolyline";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(QuadTypeConst e){
	switch(e){
		case QuadTypeConst_Billboard:	return L"QuadTypeConst_Billboard";
		case QuadTypeConst_Polygon:	return L"QuadTypeConst_Polygon";
		case QuadTypeConst_Facing:	return L"QuadTypeConst_Facing";
		case QuadTypeConst_Polyline:	return L"QuadTypeConst_Polyline";
		case QuadTypeConst_Directional:	return L"QuadTypeConst_Directional";
		case QuadTypeConst_DirectionalPolyline:	return L"QuadTypeConst_DirectionalPolyline";
		default:	return L"UNKNOWN";
	}
}

/// @brief	法線タイプ
inline static const char *ToString(NormalTypeConst e){
	switch(e){
		case NormalTypeConst_Standard:	return "NormalTypeConst_Standard";
		case NormalTypeConst_CameraDirectory:	return "NormalTypeConst_CameraDirectory";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(NormalTypeConst e){
	switch(e){
		case NormalTypeConst_Standard:	return L"NormalTypeConst_Standard";
		case NormalTypeConst_CameraDirectory:	return L"NormalTypeConst_CameraDirectory";
		default:	return L"UNKNOWN";
	}
}

/// @brief	座標系変換タイプ
inline static const char *ToString(CoordinateSystemConvertTypeConst e){
	switch(e){
		case CoordinateSystemConvertTypeConst_Scale:	return "CoordinateSystemConvertTypeConst_Scale";
		case CoordinateSystemConvertTypeConst_Rotate:	return "CoordinateSystemConvertTypeConst_Rotate";
		case CoordinateSystemConvertTypeConst_Translate:	return "CoordinateSystemConvertTypeConst_Translate";
		case CoordinateSystemConvertTypeConst_Vertex:	return "CoordinateSystemConvertTypeConst_Vertex";
		case CoordinateSystemConvertTypeConst_Inverse:	return "CoordinateSystemConvertTypeConst_Inverse";
		case CoordinateSystemConvertTypeConst_InverseAngle:	return "CoordinateSystemConvertTypeConst_InverseAngle";
		case CoordinateSystemConvertTypeConst_InverseAngleHalf:	return "CoordinateSystemConvertTypeConst_InverseAngleHalf";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(CoordinateSystemConvertTypeConst e){
	switch(e){
		case CoordinateSystemConvertTypeConst_Scale:	return L"CoordinateSystemConvertTypeConst_Scale";
		case CoordinateSystemConvertTypeConst_Rotate:	return L"CoordinateSystemConvertTypeConst_Rotate";
		case CoordinateSystemConvertTypeConst_Translate:	return L"CoordinateSystemConvertTypeConst_Translate";
		case CoordinateSystemConvertTypeConst_Vertex:	return L"CoordinateSystemConvertTypeConst_Vertex";
		case CoordinateSystemConvertTypeConst_Inverse:	return L"CoordinateSystemConvertTypeConst_Inverse";
		case CoordinateSystemConvertTypeConst_InverseAngle:	return L"CoordinateSystemConvertTypeConst_InverseAngle";
		case CoordinateSystemConvertTypeConst_InverseAngleHalf:	return L"CoordinateSystemConvertTypeConst_InverseAngleHalf";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールドコリジョン傾きタイプ
inline static const char *ToString(FieldCollisionSlopeTypeConst e){
	switch(e){
		case FieldCollisionSlopeTypeConst_Constant:	return "FieldCollisionSlopeTypeConst_Constant";
		case FieldCollisionSlopeTypeConst_Curve:	return "FieldCollisionSlopeTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldCollisionSlopeTypeConst e){
	switch(e){
		case FieldCollisionSlopeTypeConst_Constant:	return L"FieldCollisionSlopeTypeConst_Constant";
		case FieldCollisionSlopeTypeConst_Curve:	return L"FieldCollisionSlopeTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	テクスチャーフィルタタイプ
inline static const char *ToString(TextureFilterTypeConst e){
	switch(e){
		case TextureFilterTypeConst_Nearest:	return "TextureFilterTypeConst_Nearest";
		case TextureFilterTypeConst_Linear:	return "TextureFilterTypeConst_Linear";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TextureFilterTypeConst e){
	switch(e){
		case TextureFilterTypeConst_Nearest:	return L"TextureFilterTypeConst_Nearest";
		case TextureFilterTypeConst_Linear:	return L"TextureFilterTypeConst_Linear";
		default:	return L"UNKNOWN";
	}
}

/// @brief	描画フェイズタイプ
inline static const char *ToString(DrawPhaseTypeConst e){
	switch(e){
		case DrawPhaseTypeConst_Opacity:	return "DrawPhaseTypeConst_Opacity";
		case DrawPhaseTypeConst_Translucence:	return "DrawPhaseTypeConst_Translucence";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(DrawPhaseTypeConst e){
	switch(e){
		case DrawPhaseTypeConst_Opacity:	return L"DrawPhaseTypeConst_Opacity";
		case DrawPhaseTypeConst_Translucence:	return L"DrawPhaseTypeConst_Translucence";
		default:	return L"UNKNOWN";
	}
}

/// @brief	生成形状タイプ
inline static const char *ToString(GenerateShapeTypeConst e){
	switch(e){
		case GenerateShapeTypeConst_Point:	return "GenerateShapeTypeConst_Point";
		case GenerateShapeTypeConst_Cube:	return "GenerateShapeTypeConst_Cube";
		case GenerateShapeTypeConst_Sphere:	return "GenerateShapeTypeConst_Sphere";
		case GenerateShapeTypeConst_Cylinder:	return "GenerateShapeTypeConst_Cylinder";
		case GenerateShapeTypeConst_Model:	return "GenerateShapeTypeConst_Model";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(GenerateShapeTypeConst e){
	switch(e){
		case GenerateShapeTypeConst_Point:	return L"GenerateShapeTypeConst_Point";
		case GenerateShapeTypeConst_Cube:	return L"GenerateShapeTypeConst_Cube";
		case GenerateShapeTypeConst_Sphere:	return L"GenerateShapeTypeConst_Sphere";
		case GenerateShapeTypeConst_Cylinder:	return L"GenerateShapeTypeConst_Cylinder";
		case GenerateShapeTypeConst_Model:	return L"GenerateShapeTypeConst_Model";
		default:	return L"UNKNOWN";
	}
}

/// @brief	テクスチャ描画タイプ
inline static const char *ToString(TextureDrawTypeConst e){
	switch(e){
		case TextureDrawTypeConst_Basic:	return "TextureDrawTypeConst_Basic";
		case TextureDrawTypeConst_Alpha:	return "TextureDrawTypeConst_Alpha";
		case TextureDrawTypeConst_Add:	return "TextureDrawTypeConst_Add";
		case TextureDrawTypeConst_Sub:	return "TextureDrawTypeConst_Sub";
		case TextureDrawTypeConst_Reverse:	return "TextureDrawTypeConst_Reverse";
		case TextureDrawTypeConst_Normalmapping:	return "TextureDrawTypeConst_Normalmapping";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TextureDrawTypeConst e){
	switch(e){
		case TextureDrawTypeConst_Basic:	return L"TextureDrawTypeConst_Basic";
		case TextureDrawTypeConst_Alpha:	return L"TextureDrawTypeConst_Alpha";
		case TextureDrawTypeConst_Add:	return L"TextureDrawTypeConst_Add";
		case TextureDrawTypeConst_Sub:	return L"TextureDrawTypeConst_Sub";
		case TextureDrawTypeConst_Reverse:	return L"TextureDrawTypeConst_Reverse";
		case TextureDrawTypeConst_Normalmapping:	return L"TextureDrawTypeConst_Normalmapping";
		default:	return L"UNKNOWN";
	}
}

/// @brief	ゴール形状タイプ
inline static const char *ToString(FieldGoalShapeTypeConst e){
	switch(e){
		case FieldGoalShapeTypeConst_Point:	return "FieldGoalShapeTypeConst_Point";
		case FieldGoalShapeTypeConst_Cube:	return "FieldGoalShapeTypeConst_Cube";
		case FieldGoalShapeTypeConst_Sphere:	return "FieldGoalShapeTypeConst_Sphere";
		case FieldGoalShapeTypeConst_Cylinder:	return "FieldGoalShapeTypeConst_Cylinder";
		case FieldGoalShapeTypeConst_Model:	return "FieldGoalShapeTypeConst_Model";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldGoalShapeTypeConst e){
	switch(e){
		case FieldGoalShapeTypeConst_Point:	return L"FieldGoalShapeTypeConst_Point";
		case FieldGoalShapeTypeConst_Cube:	return L"FieldGoalShapeTypeConst_Cube";
		case FieldGoalShapeTypeConst_Sphere:	return L"FieldGoalShapeTypeConst_Sphere";
		case FieldGoalShapeTypeConst_Cylinder:	return L"FieldGoalShapeTypeConst_Cylinder";
		case FieldGoalShapeTypeConst_Model:	return L"FieldGoalShapeTypeConst_Model";
		default:	return L"UNKNOWN";
	}
}

/// @brief	テクスチャーアニメーションタイプ
inline static const char *ToString(TextureAnimationTypeConst e){
	switch(e){
		case TextureAnimationTypeConst_Nothing:	return "TextureAnimationTypeConst_Nothing";
		case TextureAnimationTypeConst_Crop:	return "TextureAnimationTypeConst_Crop";
		case TextureAnimationTypeConst_Scroll:	return "TextureAnimationTypeConst_Scroll";
		case TextureAnimationTypeConst_Pattern:	return "TextureAnimationTypeConst_Pattern";
		case TextureAnimationTypeConst_Transform:	return "TextureAnimationTypeConst_Transform";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TextureAnimationTypeConst e){
	switch(e){
		case TextureAnimationTypeConst_Nothing:	return L"TextureAnimationTypeConst_Nothing";
		case TextureAnimationTypeConst_Crop:	return L"TextureAnimationTypeConst_Crop";
		case TextureAnimationTypeConst_Scroll:	return L"TextureAnimationTypeConst_Scroll";
		case TextureAnimationTypeConst_Pattern:	return L"TextureAnimationTypeConst_Pattern";
		case TextureAnimationTypeConst_Transform:	return L"TextureAnimationTypeConst_Transform";
		default:	return L"UNKNOWN";
	}
}

/// @brief	テクスチャー画像タイプ
inline static const char *ToString(TexturePictureTypeConst e){
	switch(e){
		case TexturePictureTypeConst_File:	return "TexturePictureTypeConst_File";
		case TexturePictureTypeConst_Generate:	return "TexturePictureTypeConst_Generate";
		case TexturePictureTypeConst_FrameBuffer:	return "TexturePictureTypeConst_FrameBuffer";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TexturePictureTypeConst e){
	switch(e){
		case TexturePictureTypeConst_File:	return L"TexturePictureTypeConst_File";
		case TexturePictureTypeConst_Generate:	return L"TexturePictureTypeConst_Generate";
		case TexturePictureTypeConst_FrameBuffer:	return L"TexturePictureTypeConst_FrameBuffer";
		default:	return L"UNKNOWN";
	}
}

/// @brief	乱数タイプ
inline static const char *ToString(RandomSeedTypeConst e){
	switch(e){
		case RandomSeedTypeConst_RootNode:	return "RandomSeedTypeConst_RootNode";
		case RandomSeedTypeConst_RootNodeSeedAssign:	return "RandomSeedTypeConst_RootNodeSeedAssign";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(RandomSeedTypeConst e){
	switch(e){
		case RandomSeedTypeConst_RootNode:	return L"RandomSeedTypeConst_RootNode";
		case RandomSeedTypeConst_RootNodeSeedAssign:	return L"RandomSeedTypeConst_RootNodeSeedAssign";
		default:	return L"UNKNOWN";
	}
}

/// @brief	モデルタイプ
inline static const char *ToString(ModelTypeConst e){
	switch(e){
		case ModelTypeConst_Billboard:	return "ModelTypeConst_Billboard";
		case ModelTypeConst_Standard:	return "ModelTypeConst_Standard";
		case ModelTypeConst_Facing:	return "ModelTypeConst_Facing";
		case ModelTypeConst_Directional:	return "ModelTypeConst_Directional";
		case ModelTypeConst_DirectionalPolyline:	return "ModelTypeConst_DirectionalPolyline";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ModelTypeConst e){
	switch(e){
		case ModelTypeConst_Billboard:	return L"ModelTypeConst_Billboard";
		case ModelTypeConst_Standard:	return L"ModelTypeConst_Standard";
		case ModelTypeConst_Facing:	return L"ModelTypeConst_Facing";
		case ModelTypeConst_Directional:	return L"ModelTypeConst_Directional";
		case ModelTypeConst_DirectionalPolyline:	return L"ModelTypeConst_DirectionalPolyline";
		default:	return L"UNKNOWN";
	}
}

/// @brief	親ノード拡縮影響タイプ
inline static const char *ToString(ScaleParentNodeInfluenceTypeConst e){
	switch(e){
		case ScaleParentNodeInfluenceTypeConst_Off:	return "ScaleParentNodeInfluenceTypeConst_Off";
		case ScaleParentNodeInfluenceTypeConst_On:	return "ScaleParentNodeInfluenceTypeConst_On";
		case ScaleParentNodeInfluenceTypeConst_OnGenerateTime:	return "ScaleParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(ScaleParentNodeInfluenceTypeConst e){
	switch(e){
		case ScaleParentNodeInfluenceTypeConst_Off:	return L"ScaleParentNodeInfluenceTypeConst_Off";
		case ScaleParentNodeInfluenceTypeConst_On:	return L"ScaleParentNodeInfluenceTypeConst_On";
		case ScaleParentNodeInfluenceTypeConst_OnGenerateTime:	return L"ScaleParentNodeInfluenceTypeConst_OnGenerateTime";
		default:	return L"UNKNOWN";
	}
}

/// @brief	画像タイプ
inline static const char *ToString(Image2dTypeConst e){
	switch(e){
		case Image2dTypeConst_BackGround:	return "Image2dTypeConst_BackGround";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(Image2dTypeConst e){
	switch(e){
		case Image2dTypeConst_BackGround:	return L"Image2dTypeConst_BackGround";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールドコリジョンサイズタイプ
inline static const char *ToString(FieldCollisionSizeTypeConst e){
	switch(e){
		case FieldCollisionSizeTypeConst_Constant:	return "FieldCollisionSizeTypeConst_Constant";
		case FieldCollisionSizeTypeConst_Curve:	return "FieldCollisionSizeTypeConst_Curve";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldCollisionSizeTypeConst e){
	switch(e){
		case FieldCollisionSizeTypeConst_Constant:	return L"FieldCollisionSizeTypeConst_Constant";
		case FieldCollisionSizeTypeConst_Curve:	return L"FieldCollisionSizeTypeConst_Curve";
		default:	return L"UNKNOWN";
	}
}

/// @brief	クロップアニメーションタイプ
inline static const char *ToString(TextureCropAnimationTypeConst e){
	switch(e){
		case TextureCropAnimationTypeConst__1x1:	return "TextureCropAnimationTypeConst__1x1";
		case TextureCropAnimationTypeConst__2x1:	return "TextureCropAnimationTypeConst__2x1";
		case TextureCropAnimationTypeConst__4x1:	return "TextureCropAnimationTypeConst__4x1";
		case TextureCropAnimationTypeConst__2x2:	return "TextureCropAnimationTypeConst__2x2";
		case TextureCropAnimationTypeConst__4x4:	return "TextureCropAnimationTypeConst__4x4";
		case TextureCropAnimationTypeConst__8x8:	return "TextureCropAnimationTypeConst__8x8";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TextureCropAnimationTypeConst e){
	switch(e){
		case TextureCropAnimationTypeConst__1x1:	return L"TextureCropAnimationTypeConst__1x1";
		case TextureCropAnimationTypeConst__2x1:	return L"TextureCropAnimationTypeConst__2x1";
		case TextureCropAnimationTypeConst__4x1:	return L"TextureCropAnimationTypeConst__4x1";
		case TextureCropAnimationTypeConst__2x2:	return L"TextureCropAnimationTypeConst__2x2";
		case TextureCropAnimationTypeConst__4x4:	return L"TextureCropAnimationTypeConst__4x4";
		case TextureCropAnimationTypeConst__8x8:	return L"TextureCropAnimationTypeConst__8x8";
		default:	return L"UNKNOWN";
	}
}

/// @brief	深度テストタイプ
inline static const char *ToString(DepthTestTypeConst e){
	switch(e){
		case DepthTestTypeConst_Less:	return "DepthTestTypeConst_Less";
		case DepthTestTypeConst_LessEqual:	return "DepthTestTypeConst_LessEqual";
		case DepthTestTypeConst_Greater:	return "DepthTestTypeConst_Greater";
		case DepthTestTypeConst_GreaterEqual:	return "DepthTestTypeConst_GreaterEqual";
		case DepthTestTypeConst_Equal:	return "DepthTestTypeConst_Equal";
		case DepthTestTypeConst_NotEqual:	return "DepthTestTypeConst_NotEqual";
		case DepthTestTypeConst_Never:	return "DepthTestTypeConst_Never";
		case DepthTestTypeConst_Always:	return "DepthTestTypeConst_Always";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(DepthTestTypeConst e){
	switch(e){
		case DepthTestTypeConst_Less:	return L"DepthTestTypeConst_Less";
		case DepthTestTypeConst_LessEqual:	return L"DepthTestTypeConst_LessEqual";
		case DepthTestTypeConst_Greater:	return L"DepthTestTypeConst_Greater";
		case DepthTestTypeConst_GreaterEqual:	return L"DepthTestTypeConst_GreaterEqual";
		case DepthTestTypeConst_Equal:	return L"DepthTestTypeConst_Equal";
		case DepthTestTypeConst_NotEqual:	return L"DepthTestTypeConst_NotEqual";
		case DepthTestTypeConst_Never:	return L"DepthTestTypeConst_Never";
		case DepthTestTypeConst_Always:	return L"DepthTestTypeConst_Always";
		default:	return L"UNKNOWN";
	}
}

/// @brief	移動タイプ
inline static const char *ToString(TranslateTypeConst e){
	switch(e){
		case TranslateTypeConst_Constant:	return "TranslateTypeConst_Constant";
		case TranslateTypeConst_NewtonDynamics:	return "TranslateTypeConst_NewtonDynamics";
		case TranslateTypeConst_CurveValue:	return "TranslateTypeConst_CurveValue";
		case TranslateTypeConst_CurveSpeed:	return "TranslateTypeConst_CurveSpeed";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TranslateTypeConst e){
	switch(e){
		case TranslateTypeConst_Constant:	return L"TranslateTypeConst_Constant";
		case TranslateTypeConst_NewtonDynamics:	return L"TranslateTypeConst_NewtonDynamics";
		case TranslateTypeConst_CurveValue:	return L"TranslateTypeConst_CurveValue";
		case TranslateTypeConst_CurveSpeed:	return L"TranslateTypeConst_CurveSpeed";
		default:	return L"UNKNOWN";
	}
}

/// @brief	生成タイプ
inline static const char *ToString(GenerateTypeConst e){
	switch(e){
		case GenerateTypeConst_Constant:	return "GenerateTypeConst_Constant";
		case GenerateTypeConst_Timing:	return "GenerateTypeConst_Timing";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(GenerateTypeConst e){
	switch(e){
		case GenerateTypeConst_Constant:	return L"GenerateTypeConst_Constant";
		case GenerateTypeConst_Timing:	return L"GenerateTypeConst_Timing";
		default:	return L"UNKNOWN";
	}
}

/// @brief	エミッタタイプ
inline static const char *ToString(EmitterTypeConst e){
	switch(e){
		case EmitterTypeConst_Quad:	return "EmitterTypeConst_Quad";
		case EmitterTypeConst_Particle:	return "EmitterTypeConst_Particle";
		case EmitterTypeConst_SimpleParticle:	return "EmitterTypeConst_SimpleParticle";
		case EmitterTypeConst_MassParticle:	return "EmitterTypeConst_MassParticle";
		case EmitterTypeConst_Model:	return "EmitterTypeConst_Model";
		case EmitterTypeConst_Stripe:	return "EmitterTypeConst_Stripe";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(EmitterTypeConst e){
	switch(e){
		case EmitterTypeConst_Quad:	return L"EmitterTypeConst_Quad";
		case EmitterTypeConst_Particle:	return L"EmitterTypeConst_Particle";
		case EmitterTypeConst_SimpleParticle:	return L"EmitterTypeConst_SimpleParticle";
		case EmitterTypeConst_MassParticle:	return L"EmitterTypeConst_MassParticle";
		case EmitterTypeConst_Model:	return L"EmitterTypeConst_Model";
		case EmitterTypeConst_Stripe:	return L"EmitterTypeConst_Stripe";
		default:	return L"UNKNOWN";
	}
}

/// @brief	親ノードアルファ影響タイプ
inline static const char *ToString(AlphaParentNodeInfluenceTypeConst e){
	switch(e){
		case AlphaParentNodeInfluenceTypeConst_Off:	return "AlphaParentNodeInfluenceTypeConst_Off";
		case AlphaParentNodeInfluenceTypeConst_On:	return "AlphaParentNodeInfluenceTypeConst_On";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(AlphaParentNodeInfluenceTypeConst e){
	switch(e){
		case AlphaParentNodeInfluenceTypeConst_Off:	return L"AlphaParentNodeInfluenceTypeConst_Off";
		case AlphaParentNodeInfluenceTypeConst_On:	return L"AlphaParentNodeInfluenceTypeConst_On";
		default:	return L"UNKNOWN";
	}
}

/// @brief	カメラタイプ
inline static const char *ToString(CameraTypeConst e){
	switch(e){
		case CameraTypeConst_Lookat:	return "CameraTypeConst_Lookat";
		case CameraTypeConst_Handy:	return "CameraTypeConst_Handy";
		case CameraTypeConst_Driving:	return "CameraTypeConst_Driving";
		case CameraTypeConst_FileReference:	return "CameraTypeConst_FileReference";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(CameraTypeConst e){
	switch(e){
		case CameraTypeConst_Lookat:	return L"CameraTypeConst_Lookat";
		case CameraTypeConst_Handy:	return L"CameraTypeConst_Handy";
		case CameraTypeConst_Driving:	return L"CameraTypeConst_Driving";
		case CameraTypeConst_FileReference:	return L"CameraTypeConst_FileReference";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールドタイプ
inline static const char *ToString(FieldTypeConst e){
	switch(e){
		case FieldTypeConst_Gravity:	return "FieldTypeConst_Gravity";
		case FieldTypeConst_Wind:	return "FieldTypeConst_Wind";
		case FieldTypeConst_Vortex:	return "FieldTypeConst_Vortex";
		case FieldTypeConst_Radialpower:	return "FieldTypeConst_Radialpower";
		case FieldTypeConst_Deceleration:	return "FieldTypeConst_Deceleration";
		case FieldTypeConst_Collision:	return "FieldTypeConst_Collision";
		case FieldTypeConst_Goal:	return "FieldTypeConst_Goal";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldTypeConst e){
	switch(e){
		case FieldTypeConst_Gravity:	return L"FieldTypeConst_Gravity";
		case FieldTypeConst_Wind:	return L"FieldTypeConst_Wind";
		case FieldTypeConst_Vortex:	return L"FieldTypeConst_Vortex";
		case FieldTypeConst_Radialpower:	return L"FieldTypeConst_Radialpower";
		case FieldTypeConst_Deceleration:	return L"FieldTypeConst_Deceleration";
		case FieldTypeConst_Collision:	return L"FieldTypeConst_Collision";
		case FieldTypeConst_Goal:	return L"FieldTypeConst_Goal";
		default:	return L"UNKNOWN";
	}
}

/// @brief	平面タイプ
inline static const char *ToString(FieldPlaneTypeConst e){
	switch(e){
		case FieldPlaneTypeConst_PlaneXY:	return "FieldPlaneTypeConst_PlaneXY";
		case FieldPlaneTypeConst_PlaneYZ:	return "FieldPlaneTypeConst_PlaneYZ";
		case FieldPlaneTypeConst_PlaneZX:	return "FieldPlaneTypeConst_PlaneZX";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldPlaneTypeConst e){
	switch(e){
		case FieldPlaneTypeConst_PlaneXY:	return L"FieldPlaneTypeConst_PlaneXY";
		case FieldPlaneTypeConst_PlaneYZ:	return L"FieldPlaneTypeConst_PlaneYZ";
		case FieldPlaneTypeConst_PlaneZX:	return L"FieldPlaneTypeConst_PlaneZX";
		default:	return L"UNKNOWN";
	}
}

/// @brief	フィールド影響タイプ
inline static const char *ToString(FieldInfluenceTypeConst e){
	switch(e){
		case FieldInfluenceTypeConst_Position:	return "FieldInfluenceTypeConst_Position";
		case FieldInfluenceTypeConst_Speed:	return "FieldInfluenceTypeConst_Speed";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(FieldInfluenceTypeConst e){
	switch(e){
		case FieldInfluenceTypeConst_Position:	return L"FieldInfluenceTypeConst_Position";
		case FieldInfluenceTypeConst_Speed:	return L"FieldInfluenceTypeConst_Speed";
		default:	return L"UNKNOWN";
	}
}

/// @brief	変形タイプ
inline static const char *ToString(TransformTypeConst e){
	switch(e){
		case TransformTypeConst_Constant:	return "TransformTypeConst_Constant";
		case TransformTypeConst_Curve:	return "TransformTypeConst_Curve";
		case TransformTypeConst_Vertex:	return "TransformTypeConst_Vertex";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(TransformTypeConst e){
	switch(e){
		case TransformTypeConst_Constant:	return L"TransformTypeConst_Constant";
		case TransformTypeConst_Curve:	return L"TransformTypeConst_Curve";
		case TransformTypeConst_Vertex:	return L"TransformTypeConst_Vertex";
		default:	return L"UNKNOWN";
	}
}

/// @brief	ノ−ドタイプ
inline static const char *ToString(NodeTypeConst e){
	switch(e){
		case NodeTypeConst_ControlNull:	return "NodeTypeConst_ControlNull";
		case NodeTypeConst_ControlXXX:	return "NodeTypeConst_ControlXXX";
		case NodeTypeConst_EmitterQuad:	return "NodeTypeConst_EmitterQuad";
		case NodeTypeConst_EmitterParticle:	return "NodeTypeConst_EmitterParticle";
		case NodeTypeConst_EmitterSimpleParticle:	return "NodeTypeConst_EmitterSimpleParticle";
		case NodeTypeConst_EmitterMassParticle:	return "NodeTypeConst_EmitterMassParticle";
		case NodeTypeConst_EmitterModel:	return "NodeTypeConst_EmitterModel";
		case NodeTypeConst_EmitterStripe:	return "NodeTypeConst_EmitterStripe";
		case NodeTypeConst_EmitterXXX:	return "NodeTypeConst_EmitterXXX";
		case NodeTypeConst_FieldGravity:	return "NodeTypeConst_FieldGravity";
		case NodeTypeConst_FieldWind:	return "NodeTypeConst_FieldWind";
		case NodeTypeConst_FieldVortex:	return "NodeTypeConst_FieldVortex";
		case NodeTypeConst_FieldRadialpower:	return "NodeTypeConst_FieldRadialpower";
		case NodeTypeConst_FieldDeceleration:	return "NodeTypeConst_FieldDeceleration";
		case NodeTypeConst_FieldCollision:	return "NodeTypeConst_FieldCollision";
		case NodeTypeConst_FieldGoal:	return "NodeTypeConst_FieldGoal";
		case NodeTypeConst_FieldXXX:	return "NodeTypeConst_FieldXXX";
		case NodeTypeConst_ObjectReference:	return "NodeTypeConst_ObjectReference";
		case NodeTypeConst_ObjectXXX:	return "NodeTypeConst_ObjectXXX";
		case NodeTypeConst_CameraLookat:	return "NodeTypeConst_CameraLookat";
		case NodeTypeConst_CameraHandy:	return "NodeTypeConst_CameraHandy";
		case NodeTypeConst_CameraDriving:	return "NodeTypeConst_CameraDriving";
		case NodeTypeConst_CameraFileReference:	return "NodeTypeConst_CameraFileReference";
		case NodeTypeConst_CameraXXX:	return "NodeTypeConst_CameraXXX";
		case NodeTypeConst_Image2dBackGround:	return "NodeTypeConst_Image2dBackGround";
		case NodeTypeConst_Image2dXXX:	return "NodeTypeConst_Image2dXXX";
		default:	return "UNKNOWN";
	}
}
inline static const wchar_t *ToWstring(NodeTypeConst e){
	switch(e){
		case NodeTypeConst_ControlNull:	return L"NodeTypeConst_ControlNull";
		case NodeTypeConst_ControlXXX:	return L"NodeTypeConst_ControlXXX";
		case NodeTypeConst_EmitterQuad:	return L"NodeTypeConst_EmitterQuad";
		case NodeTypeConst_EmitterParticle:	return L"NodeTypeConst_EmitterParticle";
		case NodeTypeConst_EmitterSimpleParticle:	return L"NodeTypeConst_EmitterSimpleParticle";
		case NodeTypeConst_EmitterMassParticle:	return L"NodeTypeConst_EmitterMassParticle";
		case NodeTypeConst_EmitterModel:	return L"NodeTypeConst_EmitterModel";
		case NodeTypeConst_EmitterStripe:	return L"NodeTypeConst_EmitterStripe";
		case NodeTypeConst_EmitterXXX:	return L"NodeTypeConst_EmitterXXX";
		case NodeTypeConst_FieldGravity:	return L"NodeTypeConst_FieldGravity";
		case NodeTypeConst_FieldWind:	return L"NodeTypeConst_FieldWind";
		case NodeTypeConst_FieldVortex:	return L"NodeTypeConst_FieldVortex";
		case NodeTypeConst_FieldRadialpower:	return L"NodeTypeConst_FieldRadialpower";
		case NodeTypeConst_FieldDeceleration:	return L"NodeTypeConst_FieldDeceleration";
		case NodeTypeConst_FieldCollision:	return L"NodeTypeConst_FieldCollision";
		case NodeTypeConst_FieldGoal:	return L"NodeTypeConst_FieldGoal";
		case NodeTypeConst_FieldXXX:	return L"NodeTypeConst_FieldXXX";
		case NodeTypeConst_ObjectReference:	return L"NodeTypeConst_ObjectReference";
		case NodeTypeConst_ObjectXXX:	return L"NodeTypeConst_ObjectXXX";
		case NodeTypeConst_CameraLookat:	return L"NodeTypeConst_CameraLookat";
		case NodeTypeConst_CameraHandy:	return L"NodeTypeConst_CameraHandy";
		case NodeTypeConst_CameraDriving:	return L"NodeTypeConst_CameraDriving";
		case NodeTypeConst_CameraFileReference:	return L"NodeTypeConst_CameraFileReference";
		case NodeTypeConst_CameraXXX:	return L"NodeTypeConst_CameraXXX";
		case NodeTypeConst_Image2dBackGround:	return L"NodeTypeConst_Image2dBackGround";
		case NodeTypeConst_Image2dXXX:	return L"NodeTypeConst_Image2dXXX";
		default:	return L"UNKNOWN";
	}
}


BM3_END_PLATFORM_NAMESPACE
}	// namespace bm3

#endif	// #ifndef BM3_SDK_INC_BM3_CORE_BM3_CONST_H
