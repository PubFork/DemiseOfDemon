// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
#ifndef BM3_SDK_INC_BM3_CORE_FILEFORMAT_BMB_EFFECTEMITTER_MASSPARTICLE_H
#define BM3_SDK_INC_BM3_CORE_FILEFORMAT_BMB_EFFECTEMITTER_MASSPARTICLE_H

#include <ml/type/ml_basic.h>
#include <ml/utility/ml_offset_pointer.h>
#include <ml/utility/ml_make_sign.h>
#include "../../utility/internal/bm3_MacroBegin.h"
#include "bm3_bmb_common.h"

namespace bm3{
BM3_BEGIN_PLATFORM_NAMESPACE
namespace fileformat{
namespace bmb{

struct EffectEmitter_MassParticle{
	NodeHeader	node_header_;
	//
	BM3_DECLARE_GETTER_REF(StringType, Basic_Meta_Name);
	BM3_DECLARE_GETTER_REF(ml::color_rgba<float>, Basic_Meta_NodeColor);
	BM3_DECLARE_GETTER_VALUE(bool, Basic_Meta_Display);
	BM3_DECLARE_GETTER_VALUE(NodeTypeConst, Basic_Meta_NodeType);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Basic_Meta_OptimizeBit);
	BM3_DECLARE_GETTER_VALUE(EmitterTypeConst, Basic_Basic_EmitterType);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Basic_Basic_ActiveStart);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Basic_Basic_ActiveStartRange);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Basic_Basic_Life);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Basic_Basic_LifeRange);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Basic_Basic_SortPriority);
	BM3_DECLARE_GETTER_REF(EmbeddedUserDataType, Basic_Basic_UserData);
	BM3_DECLARE_GETTER_VALUE(MatrixParentNodeInfluenceTypeConst, Basic_ParentNodeInfluence_MatrixParentNodeInfluenceType);
	BM3_DECLARE_GETTER_VALUE(AlphaParentNodeInfluenceTypeConst, Basic_ParentNodeInfluence_AlphaParentNodeInfluenceType);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Basic_ParentNodeInfluence_ParentAlphaRate);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Basic_ParentNodeInfluence_ParentColorRate);
	BM3_DECLARE_GETTER_VALUE(RandomSeedTypeConst, Generate_Basic_RandomSeedType);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Generate_Basic_RandomSeed);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Generate_Constant_GenerateCount);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Generate_Constant_GenerateTime);
	BM3_DECLARE_GETTER_VALUE(bool, Generate_Constant_EndlessRepeat);
	BM3_DECLARE_GETTER_VALUE(GenerateShapeTypeConst, GenerateShape_Basic_GenerateShapeType);
	BM3_DECLARE_GETTER_VALUE(bool, GenerateShape_Basic_Display);
	BM3_DECLARE_GETTER_VALUE(bool, GenerateShape_Basic_Normal);
	BM3_DECLARE_GETTER_REF(StringType, GenerateShape_Basic_ModelRelativePath);
	BM3_DECLARE_GETTER_REF(StringType, GenerateShape_Basic_ModelName);
	BM3_DECLARE_GETTER_VALUE(ml::f32, GenerateShape_Area_Inside);
	BM3_DECLARE_GETTER_REF(ml::vector3d, GenerateShape_Area_Outside);
	BM3_DECLARE_GETTER_REF(ml::vector3d, GenerateShape_Area_Scale);
	BM3_DECLARE_GETTER_VALUE(ml::f32, GenerateShape_HorizontalArea_StartAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, GenerateShape_HorizontalArea_EndAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, GenerateShape_VerticalArea_StartAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, GenerateShape_VerticalArea_EndAngle);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Translate_Value_Initial);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Translate_Value_Range);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Translate_Speed_Initial);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Translate_Speed_Range);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Translate_Gravity_Value);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Translate_Deceleration_Value);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Translate_Noise_StartRate);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Translate_Noise_Scale);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Translate_Noise_Frequency);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Scale_Value_InitialX);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Scale_Value_RangeX);
	BM3_DECLARE_GETTER_REF(ml::color_rgba<float>, Color_Center_Value);
	BM3_DECLARE_GETTER_REF(ml::color_rgba<float>, Color_Center_Range);
	BM3_DECLARE_GETTER_VALUE(bool, Color_Center_RandomChannelSync);
	BM3_DECLARE_GETTER_VALUE(BlendTypeConst, Blend_Basic_BlendType);
	BM3_DECLARE_GETTER_VALUE(BlendAlphaTypeConst, Blend_Basic_BlendAlphaType);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Blend_Basic_Alpha);
	BM3_DECLARE_GETTER_REF(EmbeddedFloatCurveType, Blend_Basic_Curve);
	BM3_DECLARE_GETTER_VALUE(bool, Blend_Basic_AlphaTest);
	BM3_DECLARE_GETTER_VALUE(AlphaTestTypeConst, Blend_Basic_AlphaTestType);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Blend_Basic_AlphaRef);
	BM3_DECLARE_GETTER_VALUE(bool, Material_DrawControl_DepthWrite);
	BM3_DECLARE_GETTER_VALUE(DepthTestTypeConst, Material_DrawControl_DepthTestType);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Material_DrawControl_FogEffect);
	BM3_DECLARE_GETTER_REF(StringType, Texture_Layer1_PictureRelativePath);
	BM3_DECLARE_GETTER_REF(StringType, Texture_Layer1_PictureName);
	BM3_DECLARE_GETTER_VALUE(TextureAddressTypeConst, Texture_Layer1_TextureAddressType);
	BM3_DECLARE_GETTER_VALUE(TextureFilterTypeConst, Texture_Layer1_TextureFilterType);
	BM3_DECLARE_GETTER_VALUE(TextureAnimationTypeConst, Texture_Layer1_TextureAnimationType);
	BM3_DECLARE_GETTER_VALUE(ml::si32, Texture_Layer1_AnimationSpeed);
	BM3_DECLARE_GETTER_VALUE(TextureCropAnimationTypeConst, Texture_Layer1_TextureCropAnimationType);
	BM3_DECLARE_GETTER_REF(EmbeddedTextureType, Texture_Layer1_Pattern);
	BM3_DECLARE_GETTER_VALUE(FieldGoalShapeTypeConst, Goal_Basic_FieldGoalShapeType);
	BM3_DECLARE_GETTER_REF(StringType, Goal_Basic_ModelRelativePath);
	BM3_DECLARE_GETTER_REF(StringType, Goal_Basic_ModelName);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_Area_Inside);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Goal_Area_Outside);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Goal_Area_Scale);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_HorizontalArea_StartAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_HorizontalArea_EndAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_VerticalArea_StartAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_VerticalArea_EndAngle);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_Term_Start);
	BM3_DECLARE_GETTER_VALUE(ml::f32, Goal_Term_End);
	BM3_DECLARE_GETTER_REF(ml::vector3d, Goal_Position_Initial);
public:
	int	Mapping(const wchar_t *string_chunk, const void *binary_chunk){
		Basic_Meta_Name_.Mapping(string_chunk);
		Basic_Basic_UserData_.Mapping(binary_chunk, string_chunk);
		GenerateShape_Basic_ModelRelativePath_.Mapping(string_chunk);
		GenerateShape_Basic_ModelName_.Mapping(string_chunk);
		Blend_Basic_Curve_.Mapping(binary_chunk);
		Texture_Layer1_PictureRelativePath_.Mapping(string_chunk);
		Texture_Layer1_PictureName_.Mapping(string_chunk);
		Texture_Layer1_Pattern_.Mapping(binary_chunk);
		Goal_Basic_ModelRelativePath_.Mapping(string_chunk);
		Goal_Basic_ModelName_.Mapping(string_chunk);
		node_header_.ChildArray_.Mapping(binary_chunk);

		int	all_size = node_header_.byte_size_;
		{
			all_size += ChildNodeMapping::Execute(node_header_, string_chunk, binary_chunk);
		}
		return all_size;
	}
	typedef	NodeHeader::ChildArrayType_	ChildArrayType_;
	const ChildArrayType_	&ChildArray() const{
		return node_header_.ChildArray_;
	}
	ChildArrayType_	&ChildArray() {
		return node_header_.ChildArray_;
	}
};

#include "../../utility/internal/bm3_MacroEnd.h"
}	// namespace bmb
}	// namespace fileformat
BM3_END_PLATFORM_NAMESPACE
}	// namespace bm3

#endif	// BM3_SDK_INC_BM3_CORE_FILEFORMAT_BMB_EFFECTEMITTER_MASSPARTICLE_H
